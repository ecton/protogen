using System;
using System.Collections.Generic;
using System.Linq;
using Humanizer;

namespace Protogen.Models.Generators.Csharp
{
    class EFDbContext
    {
        private Project _project;
        private CodeGenerator _generator = new CodeGenerator();
        public EFDbContext(Project project)
        {
            _project = project;
        }


        public string Generate()
        {
            RenderAutogenerated();
            RenderUsingStatements();
            BeginClass();
            RenderModels();
            RenderOnModelCreating();
            EndClass();
            return _generator.ToString();
        }

        private void RenderAutogenerated()
        {
            _generator.AppendLine("/// <auto-generated>")
                      .AppendLine("/// This file was automatically generated using Protogen.")
                      .AppendLine("/// </auto-generated>");
        }

        private void RenderUsingStatements()
        {
            _generator.AppendLine("using Microsoft.EntityFrameworkCore;")
                      .AppendLine("using Microsoft.EntityFrameworkCore.Infrastructure;")
                      .AppendLine("using Microsoft.EntityFrameworkCore.Migrations;")
                      .AppendLine("using System.Linq;")
                      .AppendLine();
        }

        private void BeginClass()
        {
            _generator.AppendLine($"namespace {_project.Namespace ?? _project.Name}.Models")
                      .BeginBlock()
                      .AppendLine($"/// <summary>")
                      .AppendLine($"/// EntityFramework DbContext subclass for {_project.Name.Pascalize()}")
                      .AppendLine($"/// </summary>")
                      .AppendLine($"public partial class {_project.Name.Pascalize()}DbContext : {_project.Setting("dbContextSuperclass", "DbContext")}")
                      .BeginBlock();
        }

        private void EndClass()
        {
            _generator.EndBlock() //End class
                      .EndBlock(); // End namespace
        }

        private void RenderModels()
        {
            foreach (var model in _project.AllModels)
            {
                _generator.AppendLine($"/// <summary>")
                          .AppendLine($"/// Gets or sets the collection of <see cref=\"{model.Name.Pascalize()}\"/>")
                          .AppendLine($"/// </summary>")
                          .AppendLine($"public DbSet<{model.Name.Pascalize()}> {model.Name.Pluralize().Pascalize()} {{ get; set; }}")
                          .EnsureEmptyLine();
            }
        }

        private void RenderOnModelCreating()
        {
            _generator.AppendLine()
                      .AppendLine($"/// <summary>")
                      .AppendLine($"/// Overrides to add complex keys and other features. Calls the superclasses OnModelCreating.")
                      .AppendLine($"/// </summary>")
                      .AppendLine($"/// <param name=\"modelBuilder\">The model builder being created.</param>")
                      .AppendLine("protected override void OnModelCreating(ModelBuilder modelBuilder)")
                      .BeginBlock();

            foreach (var model in _project.AllModels)
            {
                if (!model.HasSimplePrimaryKey)
                {
                    RenderCompoundPrimaryKey(model);
                }
            }

            _generator.AppendLine("base.OnModelCreating(modelBuilder);")
                      .EndBlock()
                      .EnsureEmptyLine();
        }

        private void RenderCompoundPrimaryKey(Model model)
        {
            _generator.Append($"modelBuilder.Entity<{model.Name.Pascalize()}>()")
                      .AppendLine($".HasKey(t => new {{ {string.Join(", ", model.PrimaryKeys.Select(f => $"t.{f.Name.Pascalize()}"))} }});")
                      .EnsureEmptyLine();
        }
    }
}
