/// <auto-generated>
/// This file was automatically generated using Protogen.
/// </auto-generated>
using System;
using System.Linq;
using GraphQL;
using GraphQL.Types;
using SimpleExample.Models;

namespace SimpleExample.GraphQL
{
    /// <summary>
    /// A task that can be marked as completed.
    /// </summary>
    public class TodoType : ObjectGraphType<Todo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Todo"/> class.
        /// </summary>
        public TodoType()
        {
            Field(
                typeof(long).GetGraphTypeFromType(false),
                "id",
                @"The unqiue ID of the task",
                resolve: ctx => ctx.Source.Id
            );
            Field(
                typeof(DateTimeOffset).GetGraphTypeFromType(true),
                "completedAt",
                @"",
                resolve: ctx => ctx.Source.CompletedAt?.UtcDateTime
            );
            Field<TodoType>("parent", @"", resolve: ctx => 
            {
                var schemaContext = (SimpleExampleSchema.Context)ctx.UserContext;
                return schemaContext.Database.Todos.Where(x => x.Id == ctx.Source.ParentId).FirstOrDefault();
            });
            Field(
                typeof(bool).GetGraphTypeFromType(false),
                "priority",
                @"",
                resolve: ctx => ctx.Source.Priority
            );
            Field(
                typeof(string).GetGraphTypeFromType(false),
                "task",
                @"",
                resolve: ctx => ctx.Source.Task
            );
            Connection<ListGraphType<TodoType>>()
                .Name("children")
                .Resolve(ctx => 
                {
                    var schemaContext = (SimpleExampleSchema.Context)ctx.UserContext;
                    return schemaContext.Database.Todos.Where(x => x.ParentId == ctx.Source.Id);
                });
        }
    }
}
